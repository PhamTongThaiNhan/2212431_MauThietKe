package coffee.singleton;

import java.sql.*;
import java.util.*;

public class DatabaseManager {
    private static DatabaseManager instance;
    private Connection conn;

    private DatabaseManager() {
        connectSQLite();
        createTables();
        seedDefaultMenu();
    }

    public static DatabaseManager getInstance() {
        if (instance == null) instance = new DatabaseManager();
        return instance;
    }

    // ===== 1Ô∏è‚É£ K·∫øt n·ªëi SQLite =====
    private void connectSQLite() {
        try {
            Class.forName("org.sqlite.JDBC");
            conn = DriverManager.getConnection("jdbc:sqlite:Database/coffeeDB.db");
            System.out.println("‚úÖ K·∫øt n·ªëi SQLite th√†nh c√¥ng!");
        } catch (Exception e) {
            System.out.println("‚ùå K·∫øt n·ªëi SQLite th·∫•t b·∫°i: " + e.getMessage());
        }
    }

    // ===== 2Ô∏è‚É£ T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥ =====
    private void createTables() {
        try (Statement st = conn.createStatement()) {
            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS Users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE,
                    password TEXT,
                    role TEXT
                );
            """);

            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS Menu (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE,
                    price REAL
                );
            """);

            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS Orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    description TEXT,
                    quantity INTEGER,
                    subtotal REAL,
                    discount REAL,
                    total REAL,
                    strategy TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                );
            """);
        } catch (SQLException e) {
            System.out.println("‚ö†Ô∏è L·ªói khi t·∫°o b·∫£ng: " + e.getMessage());
        }
    }

    // ===== 3Ô∏è‚É£ Seed d·ªØ li·ªáu m·∫´u cho Menu =====
    private void seedDefaultMenu() {
    try (Statement st = conn.createStatement()) {
        // Seed menu n·∫øu tr·ªëng
        ResultSet rs = st.executeQuery("SELECT COUNT(*) FROM Menu");
        if (rs.next() && rs.getInt(1) == 0) {
            System.out.println("üìã ƒêang th√™m d·ªØ li·ªáu m·∫´u v√†o Menu...");
            String sql = """
                INSERT INTO Menu (name, price) VALUES
                ('Espresso', 25000),
                ('Cappuccino', 35000),
                ('Latte', 40000),
                ('Tea', 30000),
                ('Cookie', 15000),
                ('Milk Tea', 32000);
            """;
            st.executeUpdate(sql);
        }

        // Seed ng∆∞·ªùi d√πng m·∫∑c ƒë·ªãnh (kh√¥ng ghi ƒë√® n·∫øu ƒë√£ c√≥)
        System.out.println("üîê ƒêang th√™m user m·∫∑c ƒë·ªãnh (n·∫øu ch∆∞a c√≥)...");
        st.executeUpdate("INSERT OR IGNORE INTO Users (username, password, role) VALUES ('admin', 'admin123', 'admin');");
        st.executeUpdate("INSERT OR IGNORE INTO Users (username, password, role) VALUES ('staff', 'staff123', 'staff');");

    } catch (SQLException e) {
        System.out.println("‚ö†Ô∏è L·ªói khi th√™m d·ªØ li·ªáu m·∫´u: " + e.getMessage());
    }
    }

    // ===== 5Ô∏è‚É£ ƒê·ªçc l·ªãch s·ª≠ ƒë∆°n h√†ng =====
    public List<String> readOrders() {
        List<String> list = new ArrayList<>();
        try (Statement st = conn.createStatement();
             ResultSet rs = st.executeQuery("SELECT description FROM Orders ORDER BY id")) {
            while (rs.next()) list.add(rs.getString("description"));
        } catch (SQLException e) {
            System.out.println("‚ö†Ô∏è L·ªói khi ƒë·ªçc ƒë∆°n h√†ng: " + e.getMessage());
        }
        return list;
    }

    // ===== 6Ô∏è‚É£ Cho ph√©p c√°c class kh√°c truy c·∫≠p Connection =====
    public Connection getConnection() {
        return conn;
    }
}
